Producer Consumer Problem

We need to use 'while' instead of 'if' while waiting on the consumer in blocked state.
Because calling signal only puts the waiting thread on run queue, it does not run it immediately.
If some other consumer woke up before this consumer thread T, then that will process the item and
queue will be empty again and now when T wakes up, removing item from queue will fail and will
throw an exception(InterruptedException).

The current thread T might be arbitrarily chosen to wake up or it gets interrupted or the time specified elapses and the thread wakes up.
A producer may signal the notify or notifyAll() method instead to just one and then the code will break.
It should always check in a loop for empty queue whenever a consumer wakes up.

Producer
while (true) {
       item = generate_item()
       mutex.lock()
       fifo_queue.push(item)
       mutex.unlock()
       condition.signal()
}

Consumers
while(true) {
       mutex.lock()
       while (fifo_queue.empty()) {  # Fix
            condition.wait(mutex)
       }
       item = fifo_queue.remove()
       mutex.unlock()
       process_item(item)
}